plugins {
    // the Java Plugin
    id 'java'
}

// configure that we want to compile to JDK 11
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    // configures several repositories for downloading the libraries
    mavenCentral()
    mavenLocal()

    maven {
        url('https://frcmaven.wpi.edu/artifactory/release')
    }
    maven {
        url('https://oss.sonatype.org/content/repositories/snapshots')
    }
}

// configure external libraries we want/need to use.
dependencies {
    // FlashLib stuff
    implementation ("com.flash3388.flashlib:flashlib.vision.cv:$FLASHLIB_VERSION") {
        exclude group: 'org.openpnp'
    }
    implementation "com.flash3388.flashlib:flashlib.frc.nt:$FLASHFRC_VERSION"

    // OpenCV
    implementation group: "edu.wpi.first.thirdparty.frc${YEAR}.opencv", name: 'opencv-java', version: "$OPENCV_VERSION"
    implementation group: "edu.wpi.first.thirdparty.frc${YEAR}.opencv", name: 'opencv-jni', version: "$OPENCV_VERSION", classifier: "$REMOTE_ARCH"

    // libraries from WPILib
    implementation "edu.wpi.first.wpiutil:wpiutil-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.cscore:cscore-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.ntcore:ntcore-java:$WPILIB_VERSION"
    implementation "edu.wpi.first.cameraserver:cameraserver-java:$WPILIB_VERSION"
    implementation group: 'edu.wpi.first.cscore', name: 'cscore-jni', version: "$WPILIB_VERSION", classifier: "$REMOTE_ARCH"
    implementation group: 'edu.wpi.first.ntcore', name: 'ntcore-jni', version: "$WPILIB_VERSION", classifier: "$REMOTE_ARCH"
}

// configures the JAR output
// We can easily run JAR files
// java -jar test-vision-thing.jar
jar {
    // sets the name of the file to test-vision-thing.jar
    // puts the output jar in the build folder
    archiveBaseName.set('test-vision-thing')
    archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")
    destinationDirectory.set(project.buildDir)

    // includes all the libraries into the output JAR
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // configure the main class
    manifest {
        attributes 'Main-Class': 'frc.team3388.Main'
    }
}
